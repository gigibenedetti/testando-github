<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.com.serverest</groupId>
	<artifactId>APIServeRestTest</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>APIServeRestTest</name>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>7.12.1</version>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>7.12.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>json-path</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>

/*
import AWS from 'aws-sdk';

// Defina suas credenciais do AWS aqui ou configure por variáveis de ambiente
AWS.config.update({
  region: 'us-west-2', // Substitua pela sua região
  accessKeyId: 'SUA_ACCESS_KEY_ID',
  secretAccessKey: 'SUA_SECRET_ACCESS_KEY',
});

const sqs = new AWS.SQS({ apiVersion: '2012-11-05' });

async function consumeSQSQueue(queueUrl: string): Promise<string[]> {
  const bodies: string[] = [];

  try {
    while (true) {
      const params = {
        QueueUrl: queueUrl,
        MaxNumberOfMessages: 10,
      };

      const data = await sqs.receiveMessage(params).promise();

      if (data.Messages && data.Messages.length > 0) {
        for (const message of data.Messages) {
          if (message.Body) {
            bodies.push(message.Body);

            // Exclua a mensagem da fila após processamento (se necessário)
            await sqs.deleteMessage({
              QueueUrl: queueUrl,
              ReceiptHandle: message.ReceiptHandle!,
            }).promise();
          }
        }
      } else {
        break; // Encerra o loop quando não há mais mensagens na fila
      }
    }
  } catch (error) {
    console.error('Erro ao consumir fila do SQS:', error);
  }

  return bodies;
}

// Exemplo de uso:
const queueUrl = 'URL_DA_FILA_DO_SQS'; // Substitua pela URL da fila do seu SQS
consumeSQSQueue(queueUrl)
  .then((bodies) => {
    console.log('Bodies das mensagens recebidas:', bodies);
  })
  .catch((error) => {
    console.error('Erro ao processar fila do SQS:', error);
  });

*/